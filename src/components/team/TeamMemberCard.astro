---
import SocialIcon from "./SocialIcon.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

interface Props {
  name: string;
  role: string;
  image: ImageMetadata;
  socialLinks: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    instagram?: string;
    email?: string;
  };
  priority?: boolean;
  isHead?: boolean;
}

const {
  name,
  role,
  image,
  socialLinks,
  priority = false,
  isHead = false,
} = Astro.props;
---

<!--  NEW style card -->
<div class="flex items-center space-x-4 bg-white/90 dark:bg-black/50 backdrop-blur-sm p-6 rounded-lg shadow-lg dark:shadow-none border border-purple-100/50 dark:border-purple-500/20">
  <Image
    src={image}
    alt={name}
    width={100}
    height={100}
    class="rounded-full ring-2 ring-purple-100 dark:ring-purple-500/20 object-cover w-24 h-24"
    loading={priority ? "eager" : "lazy"}
  />
  <div>
    <h3 class="text-xl font-semibold text-gray-800 dark:text-white text-transparent bg-clip-text bg-gradient-to-r from-purple-700 to-pink-700 dark:from-purple-300 dark:to-pink-300">
      {name}
    </h3>
    <p class="text-violet-700 dark:text-violet-400">
      {role}
    </p>

        <div class="flex items-center gap-4 mt-2">
          {
            socialLinks.github && (
              <SocialIcon type="github" href={socialLinks.github} />
            )
          }
          {
            socialLinks.linkedin && (
              <SocialIcon type="linkedin" href={socialLinks.linkedin} />
            )
          }
          {
            socialLinks.instagram && (
              <SocialIcon type="instagram" href={socialLinks.instagram} />
            )
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function initializeCards() {
    const cards = document.querySelectorAll("[data-team-card]");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("animate-cardEntry");
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0,
        rootMargin: "50px",
      }
    );

    cards.forEach((card) => {
      (card as HTMLElement).style.opacity = "0";
      observer.observe(card);
    });
  }

  // Initialize on load and after dynamic content changes
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeCards);
  } else {
    initializeCards();
  }
  document.addEventListener("astro:page-load", initializeCards);
</script>

<style>
  [data-team-card] {
    transform: translateY(20px);
    transition: all 0.5s cubic-bezier(0.16, 1, 0.3, 1);
  }

  [data-team-card].animate-cardEntry {
    opacity: 1 !important;
    transform: translateY(0);
  }
</style>
